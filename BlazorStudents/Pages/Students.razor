@page "/students"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject HttpClient Http

<PageTitle>Students</PageTitle>

<h1>Students</h1>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Items="@(students.AsQueryable())" Pagination="@pagination" TGridItem="Student">
        <PropertyColumn Property="@(_ => _.StudentId)" Sortable="true" />
        <TemplateColumn Title="Name" SortBy="@sortByName">
            <div class="flex items-center">
                @context.FirstName @context.LastName
            </div>
        </TemplateColumn>
        <PropertyColumn Property="@(_ => _.School)" Sortable="true" />
        <TemplateColumn Title="Actions">
            <div class="flex gap-2">
                <a class="btn btn-success btn-sm" href="/update/@context.StudentId">edit</a>
                <a class="btn btn-danger btn-sm" href="/delete/@context.StudentId">del</a>
            </div>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="pagination"></Paginator>   
}

@code {
    private IEnumerable<Student>? students;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    GridSort<Student> sortByName = GridSort<Student>
        .ByAscending(_ => _.FirstName)
        .ThenAscending(_ => _.LastName);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var queryResults = await Http.GetFromJsonAsync<Student[]>($"{Constants.BASE_URL}api/students");
            if (queryResults != null)
            {
                students = queryResults;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching students: {ex.Message}");
        }
    }

    public class Student
    {
        public int StudentId { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? School { get; set; }
    }
}