@page "/students"
@inject HttpClient Http

<PageTitle>Students</PageTitle>

<h1>Students</h1>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Items="@students" Pagination="@pagination">
        <PropertyColumn Property="@(_=> _.StudentId)" Sortable="true" />
        <TemplateColumn Title="Name" SortBy="@sortByName">
            <div class="flex items-center">
                @context.FirstName @context.LastName
            </div>
        </TemplateColumn>
        <PropertyColumn Property="@(_=> _.School)" Sortable="true" />
    </QuickGrid>   
}
@code {
    private IQueryable<Student>? students;

     protected override async Task OnInitializedAsync()
    {
        var queryResults = await Http.GetFromJsonAsync<Student[]>($"{Constants.BASE_URL}api/students");
        if (queryResults != null)
        {
            students = queryResults.AsQueryable();
        }
    }

     
    private PaginationState pagination = new PaginationState{ ItemsPerPage = 10};
   

    GridSort<Student> sortByName = GridSort<Student>.ByAscending(_ => _.FirstName)
                                                 .ThenAscending(_ => _.LastName);   

    public class Student
    {
        public int StudentId { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        public string? School { get; set; }
    }
}
